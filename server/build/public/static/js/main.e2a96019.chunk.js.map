{"version":3,"sources":["components/Start.js","Footer.js","components/Scan.js","components/Admin.js","App.js","serviceWorker.js","index.js"],"names":["Start","props","React","useState","name","updateName","sessionCode","updateSessionCode","error","changeError","className","Form","onSubmit","event","a","async","preventDefault","stopPropagation","Axios","post","loginResult","console","log","loginAdmin","login","response","data","message","Group","Control","size","placeholder","required","onChange","target","value","Feedback","type","Button","variant","Footer","role","aria-label","href","rel","playPositive","positive","Pizz","Sound","source","options","frequency","volume","attack","release","setTimeout","stop","play","playNegative","negative","playNeutral","neutral","playPrompt","prompt","Scan","resultText","changeResultText","resultTextDetail","changeResultTextDetail","status","changeStatus","scanState","changeScanState","changeState","newScanState","mainText","detailText","Nav","justify","activeKey","Item","Link","eventKey","onSelect","delay","onScan","studentID","scanner","flag","result","detail","onError","getResultBackground","onClick","back","Admin","sessions","updateSessions","students","updateStudents","attendance","updateAttendance","csv","updateCSV","uploading","updateUploading","fetchAttendance","get","attendanceMap","record","session_date","student_id","push","useEffect","Promise","all","studentMap","student","id","initialize","Accordion","map","session","Card","key","date","style","textAlign","Toggle","as","Header","cursor","passcode","Collapse","Body","sessionID","session_id","Object","values","reduce","presentNames","userRecordArray","length","firstname","lastname","attendedNames","getNamesAttended","curDateString","moment","format","newSessions","dateExists","i","code","handleCreateSession","fileList","files","file","endsWith","Papa","parse","complete","csvData","skipEmptyLines","keepEmptyRows","linkSource","downloadLink","document","createElement","download","click","disabled","reducer","state","action","appState","initialState","App","useReducer","dispatch","goBack","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e2a96019.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Form, Button } from 'react-bootstrap';\r\n\r\nimport './Start.css';\r\nimport Axios from 'axios';\r\n\r\nconst Start = (props) => {\r\n  const [name, updateName] = React.useState('');\r\n  const [sessionCode, updateSessionCode] = React.useState('');\r\n  const [error, changeError] = React.useState('');\r\n\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n\r\n    if (name && sessionCode) {\r\n      try {\r\n        const loginResult = await Axios.post('/api/login', {\r\n          name,\r\n          sessionCode,\r\n        });\r\n\r\n        console.log(loginResult);\r\n        \r\n        if (name === 'admin') {\r\n          props.loginAdmin();\r\n        } else {\r\n          props.login(name, sessionCode);\r\n        }\r\n      } catch (error) {\r\n        changeError(error.response.data.message);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className='Start'>\r\n      <header>\r\n        <h1>Attendance</h1>\r\n      </header>\r\n      <Form onSubmit={handleSubmit}>\r\n        <p>{error}</p>\r\n        <Form.Group>\r\n          <Form.Control\r\n            size='lg'\r\n            placeholder='Enter Name'\r\n            required\r\n            onChange={(event) => updateName(event.target.value)} />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            Please input your name.\r\n          </Form.Control.Feedback>\r\n        </Form.Group>\r\n        <Form.Group>\r\n          <Form.Control\r\n            size='lg'\r\n            placeholder={name === 'admin' ? 'Enter Password' : 'Enter Session Code'}\r\n            required\r\n            type={name === 'admin' ? 'password' : ''}\r\n            onChange={(event) => updateSessionCode(event.target.value)} />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            Please input the session code.\r\n          </Form.Control.Feedback>\r\n        </Form.Group>\r\n        <p>Please turn up your volume.</p>\r\n        <Button\r\n          className='Start-Button'\r\n          size='lg'\r\n          variant='primary'\r\n          type='submit'>\r\n          Start Scanning\r\n        </Button>\r\n      </Form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Start;\r\n","import React from 'react';\r\nimport './Footer.css';\r\n\r\nfunction Footer() {\r\n  return (\r\n    <div className='Footer'>\r\n      Made with <span role='img' aria-label='love'>🚄</span> by <a href='https://jamesjlu.com' target='_blank' rel=\"noopener noreferrer\">James Lu</a>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","import React from 'react';\r\nimport QrReader from 'react-qr-reader';\r\nimport './Scan.css';\r\nimport { Nav, Button } from 'react-bootstrap';\r\nimport Pizz from 'pizzicato';\r\nimport Axios from 'axios';\r\n\r\nfunction Scan(props) {\r\n  const [resultText, changeResultText] = React.useState('Ready to Scan');\r\n  const [resultTextDetail, changeResultTextDetail] = React.useState('');\r\n  const [status, changeStatus] = React.useState('in');\r\n  const [scanState, changeScanState] = React.useState('ready');\r\n\r\n  const changeState = (newScanState, mainText, detailText) => {\r\n    changeScanState(newScanState);\r\n    switch (newScanState) {\r\n      case 'ready':\r\n        changeResultText('Ready to Scan');\r\n        changeResultTextDetail('');\r\n        break;\r\n      case 'scanning':\r\n        changeResultText('Please Wait...');\r\n        playPrompt();\r\n        break;\r\n      case 'exists':\r\n        changeResultText(mainText);\r\n        changeResultTextDetail(`Checked-${status} at ${detailText}`);\r\n        playNeutral();\r\n        break;\r\n      case 'valid':\r\n        changeResultText(mainText);\r\n        changeResultTextDetail(`Successfully checked-${status}`);\r\n        playPositive();\r\n        break;\r\n      case 'no-in':\r\n        changeResultText(`${mainText} Not Scanned`);\r\n        changeResultTextDetail('Please check in first.');\r\n        playNegative();\r\n        break;\r\n      case 'invalid':\r\n        changeResultText('Invalid Code');\r\n        playNegative();\r\n        break;\r\n      default:\r\n        changeResultText('Error');\r\n        playNegative();\r\n        break;\r\n    }\r\n  };\r\n\r\n  const handleScan = async (data) => {\r\n    if (data && scanState === 'ready') {\r\n      changeState('scanning');\r\n\r\n      const result = await Axios.post('/api/checkin', {\r\n        studentID: data,\r\n        scanner: props.name,\r\n        sessionCode: props.sessionCode,\r\n        flag: status,\r\n      });\r\n\r\n      setTimeout(() => {\r\n        if (result.status === 200) {\r\n          if (result.data.result === 'valid') {\r\n            changeState('valid', result.data.name);\r\n          } else if (result.data.result === 'exists') {\r\n            changeState('exists', result.data.name, result.data.detail);\r\n          } else if (result.data.result === 'invalid') {\r\n            changeState('invalid');\r\n          } else if (result.data.result === 'no-in') {\r\n            changeState('no-in', result.data.name);\r\n          }\r\n        } else {\r\n          changeState('error');\r\n        }\r\n        setTimeout(() => {\r\n          changeState('ready');\r\n        }, 2000);\r\n      }, 500);\r\n    }\r\n  };\r\n\r\n  const getResultBackground = () => {\r\n    switch (scanState) {\r\n      case 'valid':\r\n        return 'Positive';\r\n      case 'invalid':\r\n      case 'no-in':\r\n        return 'Negative';\r\n      case 'exists':\r\n        return 'Neutral';\r\n      default:\r\n        return '';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className='Scan'>\r\n      <nav className='Scan-Nav'>\r\n        <Nav variant='pills' justify activeKey={status}>\r\n          <Nav.Item>\r\n            <Nav.Link eventKey='in' onSelect={() => changeStatus('in')}>Check-In</Nav.Link>\r\n          </Nav.Item>\r\n          <Nav.Item>\r\n            <Nav.Link eventKey='out' onSelect={() => changeStatus('out')}>Check-Out</Nav.Link>\r\n          </Nav.Item>\r\n        </Nav>\r\n      </nav>\r\n      <QrReader\r\n        className='ScanWindow'\r\n        delay={1000}\r\n        onScan={handleScan}\r\n        onError={(event) => console.log(event)}\r\n      />\r\n      <div className={\r\n        `Result ${getResultBackground()}`}>\r\n        {resultText}\r\n        <div className='Detail'>\r\n          {resultTextDetail}\r\n        </div>\r\n      </div>\r\n      <Button\r\n        className='Admin-Button'\r\n        variant='outline-secondary'\r\n        onClick={() => props.back()}>\r\n        Go Back\r\n      </Button>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst playPositive = () => {\r\n  const positive = new Pizz.Sound({\r\n    source: 'wave',\r\n    options: {\r\n        type: 'sine',\r\n        frequency: 523.25,\r\n        volume: 1,\r\n        attack: 0,\r\n        release: 0.5,\r\n    },\r\n  });\r\n\r\n  setTimeout(() => {\r\n    positive.stop();\r\n  }, 200);\r\n  positive.play();\r\n};\r\n\r\nconst playNegative = () => {\r\n  const negative = new Pizz.Sound({\r\n    source: 'wave',\r\n    options: {\r\n        type: 'sawtooth',\r\n        frequency: 100,\r\n        volume: 0.75,\r\n        attack: 0,\r\n        release: 0.5,\r\n    },\r\n  });\r\n\r\n  setTimeout(() => {\r\n    negative.stop();\r\n  }, 200);\r\n  negative.play();\r\n};\r\n\r\nconst playNeutral = () => {\r\n  const neutral = new Pizz.Sound({\r\n    source: 'wave',\r\n    options: {\r\n        type: 'sawtooth',\r\n        frequency: 392.00,\r\n        volume: 0.25,\r\n        attack: 0,\r\n        release: 0.5,\r\n    },\r\n  });\r\n\r\n  setTimeout(() => {\r\n    neutral.stop();\r\n  }, 200);\r\n  neutral.play();\r\n};\r\n\r\nconst playPrompt = () => {\r\n  const prompt = new Pizz.Sound({\r\n    source: 'wave',\r\n    options: {\r\n        type: 'sine',\r\n        frequency: 392.00,\r\n        volume: 2,\r\n        attack: 0,\r\n        release: 0.5,\r\n    },\r\n  });\r\n\r\n  setTimeout(() => {\r\n    prompt.stop();\r\n  }, 200);\r\n  prompt.play();\r\n};\r\n\r\n\r\nexport default Scan;\r\n","import React from 'react';\r\nimport { Button, Form, Accordion, Card } from 'react-bootstrap';\r\nimport Axios from 'axios';\r\nimport Papa from 'papaparse';\r\nimport moment from 'moment';\r\nimport './Admin.css';\r\n\r\n\r\nconst Admin = (props) => {\r\n  const [sessions, updateSessions] = React.useState([]);\r\n  const [students, updateStudents] = React.useState({});\r\n  const [attendance, updateAttendance] = React.useState({});\r\n  const [csv, updateCSV] = React.useState([]);\r\n  const [uploading, updateUploading] = React.useState(false);\r\n\r\n  const fetchAttendance = async () => {\r\n    const attendance = await Axios.get('/api/attendance');\r\n\r\n    const attendanceMap = {};\r\n    for (const record of attendance.data) {\r\n      if (!attendanceMap[record.session_date]) {\r\n        attendanceMap[record.session_date] = {};\r\n      }\r\n\r\n      if (!attendanceMap[record.session_date][record.student_id]) {\r\n        attendanceMap[record.session_date][record.student_id] = [];\r\n      }\r\n\r\n      attendanceMap[record.session_date][record.student_id].push(record);\r\n    }\r\n    updateAttendance(attendanceMap);\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    const initialize = async () => {\r\n      const [sessions, students] = await Promise.all([\r\n        Axios.get('/api/sessions'),\r\n        Axios.get('/api/students'),\r\n      ]);\r\n      fetchAttendance();\r\n      updateSessions(sessions.data);\r\n\r\n      const studentMap = {};\r\n      for (const student of students.data) {\r\n        studentMap[student.id] = student;\r\n      }\r\n      updateStudents(studentMap);\r\n    };\r\n\r\n    initialize();\r\n  }, []);\r\n\r\n  const getNamesPresent = (sessionID) => {\r\n    if (!attendance[sessionID]) {\r\n      return null;\r\n    }\r\n\r\n    return Object.values(attendance[sessionID]).reduce((presentNames, userRecordArray) => {\r\n      if (userRecordArray.length === 1) {\r\n        const student = students[userRecordArray[0].student_id];\r\n        presentNames.push(\r\n          <p key={student.id} className='Admin-Name'>{student.firstname} {student.lastname}</p>\r\n        );\r\n      }\r\n      return presentNames;\r\n    }, []);\r\n  };\r\n\r\n  const getNamesAttended = (sessionID) => {\r\n    if (!attendance[sessionID]) {\r\n      return null;\r\n    }\r\n\r\n    return Object.values(attendance[sessionID]).reduce((attendedNames, userRecordArray) => {\r\n      if (userRecordArray.length === 2) {\r\n        const student = students[userRecordArray[0].student_id];\r\n        attendedNames.push(\r\n          <p key={student.id} className='Admin-Name'>{student.firstname} {student.lastname}</p>\r\n        );\r\n      }\r\n      return attendedNames;\r\n    }, []);\r\n  }\r\n\r\n  const getSessions = () => {\r\n    return sessions.map((session) => {\r\n      return (\r\n        <Card key={session.date} style={{ textAlign: 'left' }} >\r\n          <Accordion.Toggle as={Card.Header} eventKey={session.date} style={{ cursor: 'pointer' }}>\r\n            {session.date} - {session.passcode}\r\n          </Accordion.Toggle>\r\n          <Accordion.Collapse eventKey={session.date}>\r\n            <Card.Body>\r\n              <div className='Admin-NameCategory'>\r\n                <h4>Checked-In</h4>\r\n                <div className='Admin-Nameset'>\r\n                  {getNamesPresent(session.session_id)}\r\n                </div>\r\n              </div>\r\n              <div className='Admin-NameCategory'>\r\n                <h4>Checked-Out</h4>\r\n                <div className='Admin-Nameset'>\r\n                  {getNamesAttended(session.session_id)}\r\n                </div>\r\n              </div>\r\n            </Card.Body>\r\n          </Accordion.Collapse>\r\n        </Card>\r\n      );\r\n    });\r\n  };\r\n\r\n  const handleFileUpload = (event) => {\r\n    const target = event.target;\r\n    const fileList = target.files;\r\n    if (fileList.length !== 1) {\r\n      // throw error\r\n      console.log('error');\r\n    }\r\n\r\n    const file = fileList[0];\r\n    if (!file.name.endsWith('.csv')) {\r\n      console.log('not csv');\r\n    }\r\n\r\n    const parseResult = (result) => {\r\n      const csvData = result.data;\r\n      if (csvData.length < 1) {\r\n        console.log('empty');\r\n      }\r\n      if (csvData.length === 1) {\r\n        console.log('no content');\r\n      }\r\n      console.log(result);\r\n      updateCSV(result.data);\r\n    }\r\n\r\n    Papa.parse(file, {\r\n      complete: parseResult,\r\n      skipEmptyLines: true,\r\n      keepEmptyRows: false,\r\n    });\r\n  };\r\n\r\n  const handleCreateSession = async () => {\r\n    const result = await Axios.post('/api/createSession');\r\n\r\n    if (result.status === 200) {\r\n      const curDateString = moment().format('dddd, YYYY-MM-DD');\r\n      console.log(curDateString);\r\n      const newSessions = [];\r\n      \r\n      let dateExists = false;\r\n      for (let i = 0; i < sessions.length; i++) {\r\n        if (sessions[i].date === curDateString) {\r\n          newSessions.push({\r\n            date: curDateString, \r\n            passcode: result.data.code\r\n          });\r\n          dateExists = true;\r\n        } else {\r\n          newSessions.push(sessions[i]);\r\n        }\r\n      }\r\n\r\n      if (!dateExists) {\r\n        newSessions.push({\r\n          date: curDateString, \r\n          passcode: result.data.code\r\n        });\r\n      }\r\n\r\n      updateSessions(newSessions);\r\n    } else {\r\n      console.log('Try Again');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className='Admin'>\r\n      <section>\r\n        <h1>Sessions</h1>\r\n        <Form.Group>\r\n          <Button variant='outline-primary' onClick={() => fetchAttendance()}>Update Attendance</Button>\r\n        </Form.Group>\r\n        <Accordion>\r\n          {getSessions()}\r\n        </Accordion>\r\n\r\n        <Button className='Admin-Button' onClick={() => handleCreateSession()}>Create Session</Button>\r\n      </section>\r\n\r\n      <section>\r\n        <h1>Students</h1>\r\n        <div>\r\n          <Form className='Admin-Form'>\r\n            <Form.Control\r\n              onChange={handleFileUpload}\r\n              className='Admin-Upload'\r\n              type='file' />\r\n            <Button \r\n              onClick={async () => {\r\n                updateUploading(true);\r\n                const result = await Axios.post('/api/updateStudents', {\r\n                  data: csv,\r\n                });\r\n                const linkSource = `data:application/pdf;base64,${result.data}`;\r\n                const downloadLink = document.createElement('a');\r\n                const fileName = 'qr-codes.pdf';\r\n\r\n                downloadLink.href = linkSource;\r\n                downloadLink.download = fileName;\r\n                downloadLink.click();\r\n                updateUploading(false);\r\n              }}\r\n              className='Admin-Upload-Button'\r\n              disabled={uploading || csv.length === 0}>\r\n              Upload\r\n            </Button>\r\n          </Form>\r\n        </div>\r\n      </section>\r\n      \r\n      <Button\r\n        className='Admin-Button'\r\n        variant='outline-secondary'\r\n        onClick={() => props.back()}>\r\n        Go Back\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Admin;\r\n","import React from 'react';\nimport './App.css';\nimport Start from './components/Start';\nimport Footer from './Footer';\nimport Scan from './components/Scan';\nimport Admin from './components/Admin';\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'show-admin':\n      return { ...state, appState: 'admin', name: 'admin' };\n    case 'show-home':\n      return { ...state, appState: 'start', name: '', sessionCode: '' };\n    case 'start-session':\n      return {\n        ...state,\n        appState: 'scan',\n        name: action.name,\n        sessionCode: action.sessionCode\n      };\n    default:\n      return state;\n  }\n};\n\nconst initialState = {\n  appState: 'start',\n  name: '',\n  sessionCode: '',\n};\n\nfunction App() {\n  const [state, dispatch] = React.useReducer(reducer, initialState);\n\n  const goBack = () => {\n    dispatch({ type: 'show-home', name: '', sessionCode: '' });\n  };\n\n  const showStart = () => {\n    if (state.appState !== 'start') {\n      return null;\n    }\n\n    return (\n      <Start\n        login={(name, sessionCode) => dispatch({\n            type: 'start-session',\n            name,\n            sessionCode,\n          })\n        }\n        loginAdmin={() => dispatch({\n          type: 'show-admin',\n        })} />\n    );\n  };\n\n  const showScan = () => {\n    if (state.appState !== 'scan') {\n      return null;\n    }\n\n    return (\n      <Scan sessionCode={state.sessionCode} name={state.name} back={goBack} />\n    );\n  };\n\n  const showAdmin = () => {\n    if (state.appState !== 'admin' || state.name !== 'admin') {\n      return null;\n    }\n\n    return <Admin back={goBack} />;\n  }\n\n  return (\n    <div className='App'>\n      {showStart()}\n      {showScan()}\n      {showAdmin()}\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}